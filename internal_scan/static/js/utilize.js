function displayResultCount(count) {
    console.log("display res " + count);
    const resultLabel = document.getElementById("on_filtered_result");
    if (!resultLabel) {
        showError("Element with id 'on_filtered_result' not found.");
        return;
    }

    if (count === 0) {
        resultLabel.textContent = "No results found!";
    } else {
        resultLabel.innerHTML = `<span style="color:brown">${count}</span> results found!`;
    }
}

function showLoader() {
    document.getElementById("loading-overlay").style.display = "flex";
}

function hideLoader() {
    document.getElementById("loading-overlay").style.display = "none";
}

function exportToExcel(prData, generatedBy) {
  const now = new Date();
  const timestamp = now.toLocaleString("en-GB");

  const headerInfo = [
    [`Generated by: ${generatedBy}`],
    [`Generate on = ${timestamp}`],
    [],
  ];

  const headers = [
    "PR #",
    "PR Name",
    "Branch",
    "Status",
    "Requested By",
    "Requested Date",
    "Merged By",
    "Merged Date",
    "Enforced Rule",
    "PR Rule"
  ];

  const body = prData.map(pr => [
    pr.id,
    pr.title,
    `${pr.source_branch} -> ${pr.target_branch}`,
    pr.state,
    pr.author || "-",
    new Date(pr.created_on).toLocaleString("en-GB"),
    pr.closed_by || "-",
    new Date(pr.updated_on).toLocaleString("en-GB"),
    pr.enforced_rule ? "Yes" : "No",
    pr.pr_rule.replace(/\n/g, " | ")
  ]);

  const fullData = [...headerInfo, headers, ...body];

  const ws = XLSX.utils.aoa_to_sheet(fullData);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Pull Requests");

  XLSX.writeFile(wb, `pull_requests_${now.toISOString().slice(0, 10)}.xlsx`);
}

function showError(message) {
  const popup = document.getElementById("error-popup");
  popup.textContent = message;
  popup.style.display = "block";

  setTimeout(() => {
    popup.style.display = "none";
  }, 3000);
}
